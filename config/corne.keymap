#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        lhm: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };
        lhm_ctrl: homerow_mods_left_ctrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 13 15 27 29>;
        };
        lhm_alt: homerow_mods_left_alt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 3 16 17>;
        };
        rhm: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
    };

    macros {
        macro_backtick: macro_backtick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &wait-ms 50 &kp RSHIFT>,
                <&macro_tap &wait-ms 50 &kp EQUAL>,
                <&macro_release &wait-ms 50 &kp RSHIFT>,
                <&macro_tap &wait-ms 50 &kp SPACE>;
        };
        macro_degree: macro_degree {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &wait-ms 50 &kp LALT>,
                <&macro_tap &wait-ms 50 &kp KP_N0 &wait-ms 50 &kp KP_N1 &wait-ms 50 &kp KP_N7 &wait-ms 50 &kp KP_N6>,
                <&macro_release &wait-ms 50 &kp LALT>;
        };
        macro_greater_or_equal: macro_greater_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &wait-ms 50 &kp LS(NON_US_BSLH) &wait-ms 50 &kp RPAR>;
        };
        macro_less_or_equal: macro_less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &wait-ms 50 &kp NON_US_BSLH &wait-ms 50 &kp RPAR>;
        };
        macro_permille: macro_permille {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &wait-ms 50 &kp LALT>,
                <&macro_tap &wait-ms 50 &kp KP_N0 &wait-ms 50 &kp KP_N1 &wait-ms 50 &kp KP_N3 &wait-ms 50 &kp KP_N7>,
                <&macro_release &wait-ms 50 &kp LALT>;
        };
        macro_str_neuro: macro_str_neuro {
            compatible = "zmk,behavior-macro";
            wait-ms = <50>;
            tap-ms = <50>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap &wait-ms 50 &kp LS(C) &wait-ms 50 &kp LS(N) &wait-ms 50 &kp N2 &wait-ms 50 &kp KP_MINUS &wait-ms 50 &kp N1 &wait-ms 50 &kp N2 &wait-ms 50 &kp LS(PERIOD) &wait-ms 50 &kp SPACE &wait-ms 50 &kp N &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp M &wait-ms 50 &kp A &wait-ms 50 &kp A &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp L &wait-ms 50 &kp SEMICOLON &wait-ms 50 &kp Y &wait-ms 50 &kp D &wait-ms 50 &kp SEMICOLON &wait-ms 50 &kp S &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(S) &wait-ms 50 &kp I &wait-ms 50 &kp L &wait-ms 50 &kp M &wait-ms 50 &kp I &wait-ms 50 &kp E &wait-ms 50 &kp N &wait-ms 50 &kp SPACE &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp I &wait-ms 50 &kp K &wait-ms 50 &kp K &wait-ms 50 &kp E &wait-ms 50 &kp E &wait-ms 50 &kp T &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(H) &wait-ms 50 &kp KP_MINUS &wait-ms 50 &kp T &wait-ms 50 &kp E &wait-ms 50 &kp S &wait-ms 50 &kp T &wait-ms 50 &kp I &wait-ms 50 &kp L &wait-ms 50 &kp L &wait-ms 50 &kp SINGLE_QUOTE &wait-ms 50 &kp SPACE &wait-ms 50 &kp N &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp M &wait-ms 50 &kp A &wait-ms 50 &kp A &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp T &wait-ms 50 &kp COMMA &wait-ms 50 &kp SPACE &wait-ms 50 &kp E &wait-ms 50 &kp I &wait-ms 50 &kp SPACE &wait-ms 50 &kp N &wait-ms 50 &kp Y &wait-ms 50 &kp S &wait-ms 50 &kp T &wait-ms 50 &kp A &wait-ms 50 &kp G &wait-ms 50 &kp M &wait-ms 50 &kp U &wait-ms 50 &kp S &wait-ms 50 &kp T &wait-ms 50 &kp A &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(V) &wait-ms 50 &kp A &wait-ms 50 &kp L &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp E &wait-ms 50 &kp A &wait-ms 50 &kp K &wait-ms 50 &kp T &wait-ms 50 &kp I &wait-ms 50 &kp O &wait-ms 50 &kp SPACE &wait-ms 50 &kp A &wait-ms 50 &kp D &wait-ms 50 &kp E &wait-ms 50 &kp K &wait-ms 50 &kp V &wait-ms 50 &kp A &wait-ms 50 &kp A &wait-ms 50 &kp T &wait-ms 50 &kp T &wait-ms 50 &kp I &wait-ms 50 &kp COMMA &wait-ms 50 &kp SPACE &wait-ms 50 &kp S &wait-ms 50 &kp Y &wait-ms 50 &kp M &wait-ms 50 &kp M &wait-ms 50 &kp E &wait-ms 50 &kp T &wait-ms 50 &kp R &wait-ms 50 &kp I &wait-ms 50 &kp N &wait-ms 50 &kp E &wait-ms 50 &kp N &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(K) &wait-ms 50 &kp A &wait-ms 50 &kp S &wait-ms 50 &kp V &wait-ms 50 &kp O &wait-ms 50 &kp J &wait-ms 50 &kp E &wait-ms 50 &kp N &wait-ms 50 &kp SPACE &wait-ms 50 &kp T &wait-ms 50 &kp U &wait-ms 50 &kp N &wait-ms 50 &kp T &wait-ms 50 &kp O &wait-ms 50 &kp SPACE &wait-ms 50 &kp N &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp M &wait-ms 50 &kp A &wait-ms 50 &kp A &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp COMMA &wait-ms 50 &kp SPACE &wait-ms 50 &kp S &wait-ms 50 &kp Y &wait-ms 50 &kp M &wait-ms 50 &kp M &wait-ms 50 &kp E &wait-ms 50 &kp T &wait-ms 50 &kp R &wait-ms 50 &kp I &wait-ms 50 &kp N &wait-ms 50 &kp E &wait-ms 50 &kp N &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(K) &wait-ms 50 &kp A &wait-ms 50 &kp S &wait-ms 50 &kp V &wait-ms 50 &kp O &wait-ms 50 &kp J &wait-ms 50 &kp E &wait-ms 50 &kp N &wait-ms 50 &kp SPACE &wait-ms 50 &kp M &wait-ms 50 &kp O &wait-ms 50 &kp T &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp I &wait-ms 50 &kp I &wait-ms 50 &kp K &wait-ms 50 &kp K &wait-ms 50 &kp A &wait-ms 50 &kp SPACE &wait-ms 50 &kp N &wait-ms 50 &kp O &wait-ms 50 &kp R &wait-ms 50 &kp M &wait-ms 50 &kp A &wait-ms 50 &kp A &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(K) &wait-ms 50 &kp I &wait-ms 50 &kp E &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp SPACE &wait-ms 50 &kp E &wait-ms 50 &kp I &wait-ms 50 &kp SPACE &wait-ms 50 &kp D &wait-ms 50 &kp E &wait-ms 50 &kp V &wait-ms 50 &kp I &wait-ms 50 &kp O &wait-ms 50 &kp I &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(H) &wait-ms 50 &kp A &wait-ms 50 &kp R &wait-ms 50 &kp T &wait-ms 50 &kp I &wait-ms 50 &kp A &wait-ms 50 &kp T &wait-ms 50 &kp SPACE &wait-ms 50 &kp K &wait-ms 50 &kp O &wait-ms 50 &kp H &wait-ms 50 &kp O &wait-ms 50 &kp A &wait-ms 50 &kp V &wait-ms 50 &kp A &wait-ms 50 &kp T &wait-ms 50 &kp SPACE &wait-ms 50 &kp S &wait-ms 50 &kp Y &wait-ms 50 &kp M &wait-ms 50 &kp M &wait-ms 50 &kp E &wait-ms 50 &kp T &wait-ms 50 &kp R &wait-ms 50 &kp I &wait-ms 50 &kp S &wait-ms 50 &kp E &wait-ms 50 &kp S &wait-ms 50 &kp T &wait-ms 50 &kp I &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(S) &wait-ms 50 &kp LS(N) &wait-ms 50 &kp LS(K) &wait-ms 50 &kp SPACE &wait-ms 50 &kp T &wait-ms 50 &kp A &wait-ms 50 &kp R &wait-ms 50 &kp K &wait-ms 50 &kp K &wait-ms 50 &kp A &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(R) &wait-ms 50 &kp H &wait-ms 50 &kp O &wait-ms 50 &kp M &wait-ms 50 &kp B &wait-ms 50 &kp E &wait-ms 50 &kp R &wait-ms 50 &kp G &wait-ms 50 &kp SPACE &wait-ms 50 &kp S &wait-ms 50 &kp T &wait-ms 50 &kp A &wait-ms 50 &kp B &wait-ms 50 &kp I &wait-ms 50 &kp I &wait-ms 50 &kp L &wait-ms 50 &kp I &wait-ms 50 &kp PERIOD &wait-ms 50 &kp SPACE &wait-ms 50 &kp LS(E) &wait-ms 50 &kp I &wait-ms 50 &kp SPACE &wait-ms 50 &kp T &wait-ms 50 &kp SINGLE_QUOTE &wait-ms 50 &kp R &wait-ms 50 &kp I &wait-ms 50 &kp N &wait-ms 50 &kp SINGLE_QUOTE &wait-ms 50 &kp SINGLE_QUOTE &wait-ms 50 &kp PERIOD>;
        };
        macro_tilde: macro_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &wait-ms 50 &kp RALT>,
                <&macro_tap &wait-ms 50 &kp RIGHT_BRACKET>,
                <&macro_release &wait-ms 50 &kp RALT>,
                <&macro_tap &wait-ms 50 &kp SPACE>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_capslock {
            timeout-ms = <20>;
            key-positions = <13 22>;
            bindings = <&kp CAPSLOCK>;
            layers = <0>;
        };
        combo_insert {
            timeout-ms = <20>;
            key-positions = <25 34>;
            bindings = <&kp INSERT>;
            layers = <0>;
        };
        combo_esc {
            timeout-ms = <20>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };
        combo_emark {
            timeout-ms = <20>;
            key-positions = <2 3>;
            bindings = <&kp EXCLAMATION>;
            layers = <0>;
        };
        combo_btick {
            timeout-ms = <20>;
            key-positions = <6 7>;
            bindings = <&macro_backtick>;
            layers = <0>;
        };
        combo_squote {
            timeout-ms = <20>;
            key-positions = <7 8>;
            bindings = <&kp BSLH>;
            layers = <0>;
        };
        combo_dquote {
            timeout-ms = <20>;
            key-positions = <7 8 9>;
            bindings = <&kp LS(N2)>;
            layers = <0>;
        };
        combo_qmark {
            timeout-ms = <20>;
            key-positions = <8 9>;
            bindings = <&kp UNDERSCORE>;
            layers = <0>;
        };
        combo_delete {
            timeout-ms = <40>;
            key-positions = <9 10>;
            bindings = <&kp DEL>;
            layers = <0 1 2>;
        };
        combo_ae {
            timeout-ms = <20>;
            key-positions = <13 14>;
            bindings = <&kp SINGLE_QUOTE>;
            layers = <0>;
        };
        combo_tab {
            timeout-ms = <20>;
            key-positions = <16 17>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_tilde {
            timeout-ms = <80>;
            key-positions = <18 19 20>;
            bindings = <&macro_tilde>;
            layers = <0>;
        };
        combo_equals {
            timeout-ms = <20>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };
        combo_colon {
            timeout-ms = <20>;
            key-positions = <20 21>;
            bindings = <&kp LS(PERIOD)>;
            layers = <0>;
        };
        combo_scolon {
            timeout-ms = <20>;
            key-positions = <19 20 21>;
            bindings = <&kp LS(COMMA)>;
            layers = <0>;
        };
        combo_oe {
            timeout-ms = <20>;
            key-positions = <21 22>;
            bindings = <&kp SEMICOLON>;
            layers = <0>;
        };
        combo_gui {
            timeout-ms = <20>;
            key-positions = <25 26>;
            bindings = <&kp LGUI>;
            layers = <0 1 2>;
        };
        combo_pipe {
            timeout-ms = <20>;
            key-positions = <30 31 32>;
            bindings = <&kp RA(NON_US_BSLH)>;
            layers = <0>;
        };
        combo_dash {
            timeout-ms = <20>;
            key-positions = <31 32>;
            bindings = <&kp KP_MINUS>;
            layers = <0>;
        };
        combo_uscore {
            timeout-ms = <20>;
            key-positions = <31 32 33>;
            bindings = <&kp QMARK>;
            layers = <0>;
        };
        combo_momentary_layer_3 {
            timeout-ms = <80>;
            key-positions = <37 40>;
            bindings = <&mo 3>;
            layers = <0>;
        };
        combo_momentary_layer_4 {
            timeout-ms = <80>;
            key-positions = <36 41>;
            bindings = <&mo 4>;
            layers = <0>;
        };
        combo_less_or_equal {
            timeout-ms = <80>;
            key-positions = <4 5>;
            bindings = <&macro_less_or_equal>;
            layers = <1>;
        };
        combo_greater_or_equal {
            timeout-ms = <80>;
            key-positions = <6 7>;
            bindings = <&macro_greater_or_equal>;
            layers = <1>;
        };
        combo_pound {
            timeout-ms = <80>;
            key-positions = <26 27 28>;
            bindings = <&kp RA(N3)>;
            layers = <1>;
        };
        combo_euro {
            timeout-ms = <80>;
            key-positions = <27 28>;
            bindings = <&kp RA(E)>;
            layers = <1>;
        };
        combo_permille {
            timeout-ms = <80>;
            key-positions = <27 28 29>;
            bindings = <&macro_permille>;
            layers = <1>;
        };
        combo_degree {
            timeout-ms = <80>;
            key-positions = <28 29>;
            bindings = <&macro_degree>;
            layers = <1>;
        };
        combo_multiply {
            timeout-ms = <80>;
            key-positions = <31 32>;
            bindings = <&kp KP_MULTIPLY>;
            layers = <1>;
        };
        combo_divide {
            timeout-ms = <80>;
            key-positions = <32 33>;
            bindings = <&kp KP_DIVIDE>;
            layers = <1>;
        };
        combo_page_up {
            timeout-ms = <80>;
            key-positions = <8 9>;
            bindings = <&kp PG_UP>;
            layers = <2>;
        };
        combo_home {
            timeout-ms = <80>;
            key-positions = <19 20>;
            bindings = <&kp HOME>;
            layers = <2>;
        };
        combo_page_down {
            timeout-ms = <80>;
            key-positions = <20 21>;
            bindings = <&kp PG_DN>;
            layers = <2>;
        };
        combo_end {
            timeout-ms = <80>;
            key-positions = <21 22>;
            bindings = <&kp END>;
            layers = <2>;
        };
        combo_clear_bt_profile {
            timeout-ms = <20>;
            key-positions = <36 41>;
            bindings = <&bt BT_CLR>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        L0 {
            label = "Base";
            bindings = <
&none  &kp Q          &kp W              &kp F            &kp P  &kp B      &kp J      &kp L  &kp U        &kp Y         &kp BACKSPACE        &none
&none  &lhm LSHIFT A  &lhm_ctrl LCTRL R  &lhm_alt LALT S  &kp T  &kp G      &kp M      &kp N  &rhm LALT E  &rhm LCTRL I  &rhm LSHIFT O        &none
&none  &kp Z          &kp X              &kp C            &kp D  &kp V      &kp K      &kp H  &kp COMMA    &kp PERIOD    &rhm LGUI KP_DIVIDE  &none
                                         &none            &mo 2  &kp SPACE  &kp ENTER  &mo 1  &none      
            >;
        };
        L1 {
            label = "NumChs";
            bindings = <
&none  &kp GRAVE            &kp RA(N7)  &kp RA(N8)  &kp LS(N8)  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(N9)   &kp RA(N9)    &kp RA(N0)  &kp BACKSPACE  &none
&none  &kp N1               &kp N2      &kp N3      &kp N4      &kp N5           &kp N6               &kp N7       &kp N8        &kp N9      &kp N0         &none
&none  &kp RA(NON_US_BSLH)  &kp RA(N2)  &kp LS(N3)  &kp RA(N4)  &kp LS(N5)       &kp LS(N6)           &kp KP_PLUS  &kp KP_MINUS  &none       &kp RA(MINUS)  &none
                                        &none       &none       &kp SPACE        &kp ENTER            &mo 1        &none       
            >;
        };
        L2 {
            label = "Nav";
            bindings = <
&none  &none       &none      &none     &none    &none  &none  &none     &kp PG_DN  &kp PG_UP  &kp BACKSPACE  &none
&none  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp TAB  &none  &none  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT      &none
&none  &none       &none      &none     &none    &none  &none  &none     &none      &none      &none          &none
                              &none     &mo 2    &none  &none  &none     &none    
            >;
        };
        L3 {
            label = "Funcs";
            bindings = <
&none  &kp F1      &kp F2     &kp F3      &kp F4  &kp F5  &kp F6        &kp F7          &kp F8             &kp F9           &kp F10  &none
&none  &kp LSHIFT  &kp LCTRL  &kp LALT    &none   &none   &kp C_BRI_DN  &kp C_BRI_UP    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp F11  &none
&none  &none       &none      &none       &none   &none   &kp C_RW      &kp C_PREVIOUS  &kp C_PP           &kp C_NEXT       &kp F12  &none
                              &bt BT_PRV  &none   &none   &none         &none           &bt BT_NXT       
            >;
        };
        L4 {
            label = "MED";
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none             &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &macro_str_neuro  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none             &none  &none  &none  &none
                     &none  &none  &none  &none  &none             &none
            >;
        };
    };
};
